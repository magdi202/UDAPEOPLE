version: 2.1
#  Define the jobs we want to run for this project
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
           name: frontend
           command: npm install frontend 
  build-backend:
    docker:
      - image: circleci/node:10.16.3
    steps:
      - checkout 
      - run: 
           name: backend
           command: npm install backend
  test-frontend:
    docker:
      - image: circleci/node:10.16.3
    steps:
      - checkout
      - run: 
           name: frontend
           command: npm install frontend test
  test-backend:
    docker:
      - image: circleci/node:10.16.3
    steps:
      - checkout
      - run: 
           name: backend
           command: npm install backend test
  scan-frontend:
    docker:
      - image: circleci/node:10.16.3
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run: 
           name: frontend
           command: npm install
  scan-backend:
    docker:
      - image: circleci/node:10.16.3
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run: 
           name: backend
           command: npm install
  deploy-cloudfront:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
           cd .circleci/files
           aws cloudformation deploy \
           --template-file cloudfront.yml \
           --stack-name InitialStack\
           --parameter-overrides WorkflowID=udapeople-kk1j287dhjppmz888
  deploy-infrastructure_backend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
           cd .circleci/files
           aws cloudformation deploy \
           --template-file backend.yml \
           --sack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
           --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
           --tags project=udapeople
           # Use the workflow id to mark your CloudFormation stacks so that you can reference them later on (ex: rollback). 
  deploy-infrastructure_frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name: create infrastructure frontend
          command:
           cd .circleci/files
           aws cloudformation deploy \
           --template-file frontend.yml \
           --sack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
           --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
           --tags project=udapeople
           # Use the workflow id to mark your CloudFormation stacks so that you can reference them later on (ex: rollback). 
  
  configure_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
            # You can get this ID in the section where you registered the SSH Key
            fingerprints: ["dd:d2:9d:b3:91:7e:2c:b7:c7:a0:ef:86:af:e5:c2:d2:40:c9:37:e7"] 
      - run:
          name: Install dependencies
          command: |
             apk add --update ansible
  
  Run_Playbook:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Run Playbook and Configure server
          command: cd .circleci/ansible
                   ansible-playbook -i inventory.txt configure-server.yml
  deploy_frontend:
    docker:
      - image: amazon/aws-cli
    steps:
       - checkout
       - run: 
          name: install python
          command: |
             apt-get install python-pip git.
       - run:
          name: Execute bucket.yml - Create Cloudformation Stack
          command:  
           aws cloudformation deploy \
            --template-file bucket.yml \
            --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"
workflows:
  build_udapeople:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
         requires: [build-frontend]
      - test-backend:
         requires: [build-backend] 
      - scan-frontend:
         requires: [build-frontend]
      - scan-backend:
         requires: [build-backend] 
      - deploy-cloudfront
      - deploy-infrastructure_backend
      - deploy-infrastructure_frontend
      - configure_infrastructure
      - Run_Playbook
      - deploy_frontend
      #- run-migrations  