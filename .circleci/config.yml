version: 2.1
commands:
  install_aws_cli:
    description: Install aws cli on Circle ci base images.
    steps:
      - run: 
          name: Install aws cli 
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  install_ansible:
    description: Install ansible on Circle ci base images.
    steps:
      - run: 
          name: Install Ansible 
          command: |
            sudo apt update
            sudo apt install software-properties-common
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y 
  install_nodejs:
    description: Install nodejs on Circle ci base images.
    steps:
      - run: 
          name: Install nodejs
          command: |
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt install -y nodejs
            sudo npm install --global n 
            sudo n 13.8.0
  destroy_environment:
    description: Destroy back-end and front-end cloudformation stacks.
    parameters:
      workflow_id: 
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>
            
  revert_migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id: 
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.workflow_id >>)
            if(( $SUCCESS == 1 )); 
            then
             cd ~/project/backend
             npm install
             npm run migrations:revert
            fi
jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
          - frontend-dependencies
      - run: 
           name: frontend
           command: |
                    cd frontend
                    npm install 
                    npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-dependencies

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-dependencies] 
      - run: 
           name: backend
           command: |
                    cd backend 
                    npm install
                    npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-dependencies
  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-dependencies]
      - run: 
           name: frontend
           command: |
                     cd frontend
                     npm install
                     npm test
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-dependencies]
      - run: 
           name: backend
           command: |
                    cd backend
                    npm install
                    npm test

  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run: 
           name: frontend
           command: |
                    cd frontend
                    npm install
                    npm audit fix --force --audit-level=critical
                    npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run: 
           name: backend
           command: |
                    cd backend
                    npm install
                    npm audit fix --audit-level=critical --force
                    npm audit fix --audit-level=critical --force
                    npm audit --audit-level=critical
  deploy-infrastructure: 
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_aws_cli
      - install_ansible
      - run:
          name: Create Cloudformation Backend Stack
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Create Cloudformation Frontend Stack
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople 
      - run:    
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text )
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            echo $BACKEND_PUBLIC_IP
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt          
      - destroy_environment:
           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_ansible
      - install_aws_cli
      - add_ssh_keys:
            fingerprints: ["76:dc:a0:74:b4:c0:b3:24:2f:75:f8:a9:0a:ce:86:42"]

      - attach_workspace:
          at: ~/                          
      - run:
          name: Run Playbook and Configure server
          command: |
                   cd .circleci/ansible
                   cat inventory.txt
                   ansible-playbook -i inventory.txt configure-server.yml
      - destroy_environment:
           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - build-backend
      - attach_workspace:
          at: ~/
      - run:
          name: Run migrations
          command: |
                   pwd
                   ls
                   cd backend
                   npm install
                   npm run migrations > migrations_dump.txt


      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully" ~/project/backend/migrations_dump.txt
            then 
              curl https://kvdb.io/9PJVEpThjm488ZwD6jmyWe/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1' 
              else
              curl https://kvdb.io/9PJVEpThjm488ZwD6jmyWe/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '999'
            fi 
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert_migrations

  
  create_and_deploy_frontend:
    docker:
      - image: amazon/aws-cli
    steps:
       - checkout
       - restore_cache:
          keys:
            - frontend-dependencies
       - run:
          name: Install dependencies
          command: |
                curl -sL https://rpm.nodesource.com/setup_10.x | bash -
                yum install nodejs -y
                yum install -y tar gzip curl software-properties-common
       - run:
          name: Get backend url
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text )
            export API_URL="http://${BACKEND_PUBLIC_IP}:3030"
            echo "API_URL=http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
            echo "${API_URL}"
            cat frontend/.env
       - run:
          name: Deploy frontend objects
          working_directory: ./frontend
          command: |
            npm install
            npm i
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
       - destroy_environment:
           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  deploy_backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_aws_cli
      - install_nodejs
      - install_ansible
      - add_ssh_keys:
          fingerprints: ["76:dc:a0:74:b4:c0:b3:24:2f:75:f8:a9:0a:ce:86:42"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Package backend
          command: |
            cd backend
            npm run build 
            tar -czvf artifact.tar.gz dist/* package*
            cd ..
            cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy_environment
      - revert_migrations
  smoke_test:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_aws_cli
      - install_nodejs
      - attach_workspace:
          at: ~/
                
      - run:
          name: backend smoke test
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
             --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
             --query 'Reservations[*].Instances[*].PublicIpAddress' \
             --output text )
            export API_URL=http://${BACKEND_PUBLIC_IP}:3030
            echo API_URL
            if curl -s $API_URL/api/status |grep "ok"
            then 
              exit 0
            else 
              exit 1 
            fi
      - run:
          name: frontend smoke test
          command: |
           URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com/#/employees"            
           echo ${URL} 
           if curl -s ${URL} | grep "Welcome"
           then
           # Change this to 0 after the job fails
           return 0
           else
           return 1
           fi
      - destroy_environment:
            workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"    
      - revert_migrations

  cloudfront_update:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_aws_cli
      - install_nodejs
      - run:
          name: get old workflow id 
          command: |
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            curl https://kvdb.io/9PJVEpThjm488ZwD6jmyWe/old_workflow_id -d "${OldWorkflowID}"
      - run:
          name: Update cloudfront distribution 
          command: |
           aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:7} \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy_environment
      - revert_migrations   

  cleanup:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_aws_cli
      - install_nodejs
      - run:
          name: Remove old stacks and files 
          command: |
           export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"  
            export OldWorkflowID=$(curl --insecure https://kvdb.io/9PJVEpThjm488ZwD6jmyWe/old_workflow_id)
            echo OldWorkflowID: "${OldWorkflowID}"
            # export STACKS=[] #put the list of stacks here
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              echo "aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
workflows:
  build_udapeople:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #    requires: [build-frontend]
      # - test-backend:
      #    requires: [build-backend] 
      # - scan-frontend:
      #    requires: [build-frontend]
      # - scan-backend:
      #    requires: [build-backend] 
      # - deploy-infrastructure:
      #    requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #    filters:
      #      branches:
      #        only: [master]
      # - configure-infrastructure:
      #    requires: [deploy-infrastructure]
      # - run-migrations:
      #    requires: [configure-infrastructure] 
      # - create_and_deploy_frontend:
      #    requires: [run-migrations]
      # - deploy_backend:
      #    requires: [run-migrations]
      # - smoke_test: 
      #    requires: [deploy_backend, create_and_deploy_frontend]
      - cloudfront_update
        #  requires: [smoke_test]
      - cleanup:
         requires: [cloudfront-update]
          filters:
            branches:
              only: [master]  